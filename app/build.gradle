plugins {
    id 'com.android.application'
}

android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        applicationId "com.windfallsheng.componentbasedaction"
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.releaseConfig
            //applicationIdSuffix ".debug"
            debuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // 指定维度
    flavorDimensions "version"

    productFlavors {
//        def suffixStr = ".development" + rootProject.ext.android["versionCode"]
        // 开发环境
        development {
            applicationIdSuffix ".development"
//            versionNameSuffix "-development"
            //manifestPlaceholders = [app_name: "APP1", icon: "@mipmap/ic_launcher",key:"11111"]
            manifestPlaceholders = [app_name: "校园缴费", icon: "@mipmap/logo"]
            //resValue("string", "strKey", "release版本")
            //resValue('string', 'isDebug', 'false')
            buildConfigField("String", "MODE", "\"development\"")
            //buildConfigField("boolean", "LOG_DEBUG", "true")
            //buildConfigField("boolean", "pilotRun", "false")
            dimension "version"
        }
        //生产环境
        product {
            manifestPlaceholders = [app_name: "校园缴费", icon: "@mipmap/logo"]
            //resValue("string", "strKey", "release版本")
            //resValue('string', 'isDebug', 'false')
            buildConfigField("String", "MODE", "\"product\"")
            dimension "version"
        }

        // 批量打包，studio3.0以上：
        android.applicationVariants.all { variant ->
//        if (variant.buildType.name == 'release')
            variant.outputs.all { output ->
                def fileName = "${applicationId}_${variant.productFlavors[0].name}_${variant.buildType.name}_v${variant.versionName}_${buildTime()}.apk"
                println "apk name=" + fileName
                //修改apk文件名称
                outputFileName = fileName
            }
        }
    }
}

//获取编译时间
static def buildTime() {
    return new Date().format("yyyy年MM月dd日HH时mm分ss秒SSS", TimeZone.getTimeZone("GMT+08:00"))
//    return new Date().format("yyyyMMdd-HHmmss-SSS", TimeZone.getTimeZone("GMT+08:00"))
}

dependencies {

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation project(':module_base')

    if (!isComponentToModuleMain.toBoolean()) {
        implementation project(':module_main')
    }
    if (!isComponentToModuleHome.toBoolean()) {
        implementation project(':module_home')
    }
    if (!isComponentToModuleMessage.toBoolean()) {
        implementation project(':module_message')
    }
    if (!isComponentToModuleMine.toBoolean()) {
        implementation project(':module_mine')
    }
    if (!isComponentToModuleLogin.toBoolean()) {
        implementation project(':module_login')
    }
    if (!isComponentToModulePay.toBoolean()) {
        implementation project(':module_pay')
    }
}